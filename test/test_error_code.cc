#include "test_utils.h"

TEST(PARSE_ERROR_CODE, LITERAL)
{
    EXPECT_PARSE_ERROR_CODE(" ", EXPECT_VALUE);
    EXPECT_PARSE_ERROR_CODE("   ", EXPECT_VALUE);
    EXPECT_PARSE_ERROR_CODE("", EXPECT_VALUE);
    EXPECT_PARSE_ERROR_CODE("\r\t\n  \r \n \t", EXPECT_VALUE);
    EXPECT_PARSE_ERROR_CODE(" null a", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE(" nullasda ", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE(" truea", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE(" true \tsda ", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE(" falsea", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE(" false \tsda ", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE("nul", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("fa\r", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("tr\b", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("nw\awer", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("fqer", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("ndsaf", INVALID_VALUE);
}
TEST(PARSE_ERROR_CODE, STRING)
{

    EXPECT_PARSE_ERROR_CODE("\"", MISS_QUOTATION_MARK);
    EXPECT_PARSE_ERROR_CODE("\"abc", MISS_QUOTATION_MARK);
    EXPECT_PARSE_ERROR_CODE("\"\\v\"", INVALID_STRING_ESCAPE);
    EXPECT_PARSE_ERROR_CODE("\"\\'\"", INVALID_STRING_ESCAPE);
    EXPECT_PARSE_ERROR_CODE("\"\\0\"", INVALID_STRING_ESCAPE);
    EXPECT_PARSE_ERROR_CODE("\"\\x12\"", INVALID_STRING_ESCAPE);
    EXPECT_PARSE_ERROR_CODE("\"\x01\"", INVALID_STRING_CHAR);
    EXPECT_PARSE_ERROR_CODE("\"\x1F\"", INVALID_STRING_CHAR);
    EXPECT_PARSE_ERROR_CODE("\"\\u\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u0\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u01\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u012\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u/000\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\uG000\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u0/00\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u0G00\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u00/0\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u00G0\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u000/\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\u000G\"", INVALID_UNICODE_HEX);
    EXPECT_PARSE_ERROR_CODE("\"\\uD800\"", INVALID_UNICODE_SURROGATE);
    EXPECT_PARSE_ERROR_CODE("\"\\uDBFF\"", INVALID_UNICODE_SURROGATE);
    EXPECT_PARSE_ERROR_CODE("\"\\uD800\\\\\"", INVALID_UNICODE_SURROGATE);
    EXPECT_PARSE_ERROR_CODE("\"\\uD800\\uDBFF\"", INVALID_UNICODE_SURROGATE);
    EXPECT_PARSE_ERROR_CODE("\"\\uD800\\uE000\"", INVALID_UNICODE_SURROGATE);
}
TEST(PARSE_ERROR_CODE, NUMBER)
{
    EXPECT_PARSE_ERROR_CODE("+0", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("+1", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE(".123", INVALID_VALUE); /* at least one digit before '.' */
    EXPECT_PARSE_ERROR_CODE("1.", INVALID_VALUE);   /* at least one digit after '.' */
    EXPECT_PARSE_ERROR_CODE("INF", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("inf", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("NAN", INVALID_VALUE);
    EXPECT_PARSE_ERROR_CODE("nan", INVALID_VALUE);
}
TEST(PARSE_ERROR_CODE, ARRAY)
{
    EXPECT_PARSE_ERROR_CODE("[1", MISS_COMMA_OR_SQUARE_BRACKET);
    EXPECT_PARSE_ERROR_CODE("[1}", MISS_COMMA_OR_SQUARE_BRACKET);
    EXPECT_PARSE_ERROR_CODE("[1 2", MISS_COMMA_OR_SQUARE_BRACKET);
    EXPECT_PARSE_ERROR_CODE("[[]", MISS_COMMA_OR_SQUARE_BRACKET);
    EXPECT_PARSE_ERROR_CODE("1e309", NUMBER_TOO_BIG);
    EXPECT_PARSE_ERROR_CODE("-1e309", NUMBER_TOO_BIG);
    EXPECT_PARSE_ERROR_CODE(
        "0123", ROOT_NOT_SINGULAR); /* after zero should be '.' , 'E' , 'e' or nothing */
    EXPECT_PARSE_ERROR_CODE("0x0", ROOT_NOT_SINGULAR);
    EXPECT_PARSE_ERROR_CODE("0x123", ROOT_NOT_SINGULAR);
}
TEST(PARSE_ERROR_CODE, OBJECT)
{
    EXPECT_PARSE_ERROR_CODE("{:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{1:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{true:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{false:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{null:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{[]:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{{}:1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{\"a\":1,", MISS_KEY);
    EXPECT_PARSE_ERROR_CODE("{\"a\"}", MISS_COLON);
    EXPECT_PARSE_ERROR_CODE("{\"a\",\"b\"}", MISS_COLON);
    EXPECT_PARSE_ERROR_CODE("{\"a\":1", MISS_COMMA_OR_CURLY_BRACKET);
    EXPECT_PARSE_ERROR_CODE("{\"a\":1]", MISS_COMMA_OR_CURLY_BRACKET);
    EXPECT_PARSE_ERROR_CODE("{\"a\":1 \"b\"", MISS_COMMA_OR_CURLY_BRACKET);
    EXPECT_PARSE_ERROR_CODE("{\"a\":{}", MISS_COMMA_OR_CURLY_BRACKET);
}
