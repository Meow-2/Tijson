#include "test_utils.h"


TEST(PARSE_STRING, STRING)
{
    std::string HelloWorld;
    HelloWorld += "Hello";
    HelloWorld += '\0';
    HelloWorld += "World";
    EXPECT_EQ_STRING("\"\"", "");
    EXPECT_EQ_STRING("\"Hello\"", "Hello");
    EXPECT_EQ_STRING("\"Hello\\nWorld\"", "Hello\nWorld");
    EXPECT_EQ_STRING("\"\\\" \\\\ \\/ \\b \\f \\n \\r \\t\"", "\" \\ / \b \f \n \r \t");
    EXPECT_EQ_STRING("\"Hello\\u0000World\"", HelloWorld);
    EXPECT_EQ_STRING("\"\\u0024\"", "\x24");                    /* Dollar sign U+0024 */
    EXPECT_EQ_STRING("\"\\u00A2\"", "\xC2\xA2");                /* Cents sign U+00A2 */
    EXPECT_EQ_STRING("\"\\u20AC\"", "\xE2\x82\xAC");            /* Euro sign U+20AC */
    EXPECT_EQ_STRING("\"\\uD834\\uDD1E\"", "\xF0\x9D\x84\x9E"); /* G clef sign U+1D11E */
    EXPECT_EQ_STRING("\"\\ud834\\udd1e\"", "\xF0\x9D\x84\x9E"); /* G clef sign U+1D11E */
}

TEST(PARSE_STRING, MISS_QUOTATION_MARK)
{
    EXPECT_PARSE_THROW_MESSAGE("\"", "MISS_QUOTATION_MARK");
    EXPECT_PARSE_THROW_MESSAGE("\"abc", "MISS_QUOTATION_MARK");
}
TEST(PARSE_STRING, INVALID_STRING_ESCAPE)
{
    EXPECT_PARSE_THROW_MESSAGE("\"\\v\"", "INVALID_STRING_ESCAPE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\'\"", "INVALID_STRING_ESCAPE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\0\"", "INVALID_STRING_ESCAPE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\x12\"", "INVALID_STRING_ESCAPE");
}
TEST(PARSE_STRING, INVALID_STRING_CHAR)
{

    EXPECT_PARSE_THROW_MESSAGE("\"\x01\"", "INVALID_STRING_CHAR");
    EXPECT_PARSE_THROW_MESSAGE("\"\x1F\"", "INVALID_STRING_CHAR");
}
TEST(PARSE_STRING, INVALID_UNICODE_HEX)
{
    EXPECT_PARSE_THROW_MESSAGE("\"\\u\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u0\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u01\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u012\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u/000\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\uG000\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u0/00\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u0G00\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u00/0\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u00G0\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u000/\"", "INVALID_UNICODE_HEX");
    EXPECT_PARSE_THROW_MESSAGE("\"\\u000G\"", "INVALID_UNICODE_HEX");
}
TEST(PARSE_STRING, INVALID_UNICODE_SURROGATE)
{
    EXPECT_PARSE_THROW_MESSAGE("\"\\uD800\"", "INVALID_UNICODE_SURROGATE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\uDBFF\"", "INVALID_UNICODE_SURROGATE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\uD800\\\\\"", "INVALID_UNICODE_SURROGATE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\uD800\\uDBFF\"", "INVALID_UNICODE_SURROGATE");
    EXPECT_PARSE_THROW_MESSAGE("\"\\uD800\\uE000\"", "INVALID_UNICODE_SURROGATE");
}
